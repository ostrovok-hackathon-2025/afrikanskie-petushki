/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Secret Guest API
 * API for "Secret Guest" app
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DocsApplicationResponse,
  DocsAuthResponse,
  DocsConfirmReport,
  DocsCreateApplicationRequest,
  DocsCreateApplicationResponse,
  DocsCreateOfferRequest,
  DocsCreateOfferResponse,
  DocsGetApplicationsResponse,
  DocsGetOffersResponse,
  DocsGetReportsResponse,
  DocsLogInRequest,
  DocsOfferResponse,
  DocsRefreshRequest,
  DocsReportResponse,
  DocsSignUpRequest,
  DocsUpdateOfferRequest,
  DocsUserResponse,
  GetApplicationParams,
  GetOfferParams,
  GetOfferSearchParams,
  GetReportMyParams,
  GetReportParams,
  PatchReportIdBody
} from './model';

export const getSecretGuestAPI = () => {
/**
 * Get all applications with pagination
 * @summary Get applications
 */
const getApplication = <TData = AxiosResponse<DocsGetApplicationsResponse>>(
    params: GetApplicationParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/application/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Creates application for given offer
 * @summary Create application
 */
const postApplication = <TData = AxiosResponse<DocsCreateApplicationResponse>>(
    docsCreateApplicationRequest: DocsCreateApplicationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/application/`,
      docsCreateApplicationRequest,options
    );
  }

/**
 * Get application by id
 * @summary Get by id
 */
const getApplicationId = <TData = AxiosResponse<DocsApplicationResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/application/${id}`,options
    );
  }

/**
 * Get all offers with pagination
 * @summary Get offers
 */
const getOffer = <TData = AxiosResponse<DocsGetOffersResponse>>(
    params: GetOfferParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/offer/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Creates offer with given info
 * @summary Create offer
 */
const postOffer = <TData = AxiosResponse<DocsCreateOfferResponse>>(
    docsCreateOfferRequest: DocsCreateOfferRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/offer/`,
      docsCreateOfferRequest,options
    );
  }

/**
 * Find offers with given search params
 * @summary Find offers
 */
const getOfferSearch = <TData = AxiosResponse<DocsGetOffersResponse>>(
    params: GetOfferSearchParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/offer/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get offer by id
 * @summary Get by id
 */
const getOfferId = <TData = AxiosResponse<DocsOfferResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/offer/${id}`,options
    );
  }

/**
 * Update offer with given id and data
 * @summary Update offer
 */
const patchOfferId = <TData = AxiosResponse<void>>(
    id: string,
    docsUpdateOfferRequest: DocsUpdateOfferRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:8080/offer/${id}`,
      docsUpdateOfferRequest,options
    );
  }

/**
 * Get all reports with pagination
 * @summary Get reports
 */
const getReport = <TData = AxiosResponse<DocsGetReportsResponse>>(
    params: GetReportParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/report/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get all reports of current user with pagination
 * @summary Get my reports
 */
const getReportMy = <TData = AxiosResponse<DocsGetReportsResponse>>(
    params: GetReportMyParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/report/my`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get report of current user by id
 * @summary Get my by id
 */
const getReportMyId = <TData = AxiosResponse<DocsReportResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/report/my/${id}`,options
    );
  }

/**
 * Get report by id
 * @summary Get by id
 */
const getReportId = <TData = AxiosResponse<DocsReportResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/report/${id}`,options
    );
  }

/**
 * Updates report with given text and photos
 * @summary Update report
 */
const patchReportId = <TData = AxiosResponse<void>>(
    id: string,
    patchReportIdBody: PatchReportIdBody, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
formData.append(`text`, patchReportIdBody.text)
formData.append(`images`, patchReportIdBody.images)

    return axios.patch(
      `http://localhost:8080/report/${id}`,
      formData,options
    );
  }

/**
 * Confirms or declains report
 * @summary Confirm report
 */
const patchReportIdConfirm = <TData = AxiosResponse<void>>(
    id: string,
    docsConfirmReport: DocsConfirmReport, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:8080/report/${id}/confirm`,
      docsConfirmReport,options
    );
  }

/**
 * Get data of current user
 * @summary Get me
 */
const getUser = <TData = AxiosResponse<DocsUserResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/user/`,options
    );
  }

/**
 * Log in with given name and password
 * @summary Log in
 */
const postUserLogIn = <TData = AxiosResponse<DocsAuthResponse>>(
    docsLogInRequest: DocsLogInRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/user/log-in`,
      docsLogInRequest,options
    );
  }

/**
 * Refresh auth credentials via refresh token
 * @summary Refresh credentials
 */
const postUserRefresh = <TData = AxiosResponse<DocsAuthResponse>>(
    docsRefreshRequest: DocsRefreshRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/user/refresh`,
      docsRefreshRequest,options
    );
  }

/**
 * Sign up with given name and password
 * @summary Sign up
 */
const postUserSignUp = <TData = AxiosResponse<DocsAuthResponse>>(
    docsSignUpRequest: DocsSignUpRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/user/sign-up`,
      docsSignUpRequest,options
    );
  }

return {getApplication,postApplication,getApplicationId,getOffer,postOffer,getOfferSearch,getOfferId,patchOfferId,getReport,getReportMy,getReportMyId,getReportId,patchReportId,patchReportIdConfirm,getUser,postUserLogIn,postUserRefresh,postUserSignUp}};
export type GetApplicationResult = AxiosResponse<DocsGetApplicationsResponse>
export type PostApplicationResult = AxiosResponse<DocsCreateApplicationResponse>
export type GetApplicationIdResult = AxiosResponse<DocsApplicationResponse>
export type GetOfferResult = AxiosResponse<DocsGetOffersResponse>
export type PostOfferResult = AxiosResponse<DocsCreateOfferResponse>
export type GetOfferSearchResult = AxiosResponse<DocsGetOffersResponse>
export type GetOfferIdResult = AxiosResponse<DocsOfferResponse>
export type PatchOfferIdResult = AxiosResponse<void>
export type GetReportResult = AxiosResponse<DocsGetReportsResponse>
export type GetReportMyResult = AxiosResponse<DocsGetReportsResponse>
export type GetReportMyIdResult = AxiosResponse<DocsReportResponse>
export type GetReportIdResult = AxiosResponse<DocsReportResponse>
export type PatchReportIdResult = AxiosResponse<void>
export type PatchReportIdConfirmResult = AxiosResponse<void>
export type GetUserResult = AxiosResponse<DocsUserResponse>
export type PostUserLogInResult = AxiosResponse<DocsAuthResponse>
export type PostUserRefreshResult = AxiosResponse<DocsAuthResponse>
export type PostUserSignUpResult = AxiosResponse<DocsAuthResponse>
