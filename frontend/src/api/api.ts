/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Secret Guest API
 * API for "Secret Guest" app
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DocsApplicationResponse,
  DocsAuthResponse,
  DocsConfirmReport,
  DocsCreateApplicationRequest,
  DocsCreateApplicationResponse,
  DocsCreateHotelRequest,
  DocsCreateHotelResponse,
  DocsCreateLocationRequest,
  DocsCreateLocationResponse,
  DocsCreateOfferRequest,
  DocsCreateOfferResponse,
  DocsCreateRoomRequest,
  DocsCreateRoomResponse,
  DocsGetApplicationsResponse,
  DocsGetHotelsResponse,
  DocsGetLocationsResponse,
  DocsGetOffersResponse,
  DocsGetReportsResponse,
  DocsGetRoomsResponse,
  DocsGetUserAppLimitInfoResponse,
  DocsLogInRequest,
  DocsOfferResponse,
  DocsRefreshRequest,
  DocsReportResponse,
  DocsSignUpRequest,
  DocsUpdateOfferRequest,
  DocsUserResponse,
  GetApplicationParams,
  GetOfferParams,
  GetOfferSearchParams,
  GetReportMyParams,
  GetReportParams,
  PatchReportIdBody
} from './model';

export const getSecretGuestAPI = () => {
/**
 * GetForPage all applications with pagination
 * @summary GetForPage applications
 */
const getApplication = <TData = AxiosResponse<DocsGetApplicationsResponse>>(
    params: GetApplicationParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/application/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Creates application for given offer
 * @summary Create application
 */
const postApplication = <TData = AxiosResponse<DocsCreateApplicationResponse>>(
    docsCreateApplicationRequest: DocsCreateApplicationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/api/v1/application/`,
      docsCreateApplicationRequest,options
    );
  }

/**
 * GetUserAppLimitInfo get info about limit and active app
 * @summary GetUserAppLimitInfo
 */
const getApplicationLimit = <TData = AxiosResponse<DocsGetUserAppLimitInfoResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/application/limit`,options
    );
  }

/**
 * GetForPage application by id
 * @summary GetForPage by id
 */
const getApplicationId = <TData = AxiosResponse<DocsApplicationResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/application/${id}`,options
    );
  }

/**
 * GetHotels all hotels
 * @summary Get hotels
 */
const getHotel = <TData = AxiosResponse<DocsGetHotelsResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/hotel/`,options
    );
  }

/**
 * Creates offer with given info
 * @summary Create hotel
 */
const postHotel = <TData = AxiosResponse<DocsCreateHotelResponse>>(
    docsCreateHotelRequest: DocsCreateHotelRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/api/v1/hotel/`,
      docsCreateHotelRequest,options
    );
  }

/**
 * GetLocations all locations
 * @summary Get locations
 */
const getLocation = <TData = AxiosResponse<DocsGetLocationsResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/location/`,options
    );
  }

/**
 * Creates location with given info
 * @summary Create location
 */
const postLocation = <TData = AxiosResponse<DocsCreateLocationResponse>>(
    docsCreateLocationRequest: DocsCreateLocationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/api/v1/location/`,
      docsCreateLocationRequest,options
    );
  }

/**
 * GetForPage all offers with pagination
 * @summary GetForPage offers
 */
const getOffer = <TData = AxiosResponse<DocsGetOffersResponse>>(
    params: GetOfferParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/offer/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Creates offer with given info
 * @summary Create offer
 */
const postOffer = <TData = AxiosResponse<DocsCreateOfferResponse>>(
    docsCreateOfferRequest: DocsCreateOfferRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/api/v1/offer/`,
      docsCreateOfferRequest,options
    );
  }

/**
 * Find offers with given search params
 * @summary Find offers
 */
const getOfferSearch = <TData = AxiosResponse<DocsGetOffersResponse>>(
    params: GetOfferSearchParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/offer/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * GetForPage offer by id
 * @summary GetForPage by id
 */
const getOfferId = <TData = AxiosResponse<DocsOfferResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/offer/${id}`,options
    );
  }

/**
 * Update offer with given id and data
 * @summary Update offer
 */
const patchOfferId = <TData = AxiosResponse<void>>(
    id: string,
    docsUpdateOfferRequest: DocsUpdateOfferRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:8080/api/v1/offer/${id}`,
      docsUpdateOfferRequest,options
    );
  }

/**
 * GetForPage all reports with pagination
 * @summary GetForPage reports
 */
const getReport = <TData = AxiosResponse<DocsGetReportsResponse>>(
    params: GetReportParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/report/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * GetForPage all reports of current user with pagination
 * @summary GetForPage my reports
 */
const getReportMy = <TData = AxiosResponse<DocsGetReportsResponse>>(
    params: GetReportMyParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/report/my`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * GetForPage report of current user by id
 * @summary GetForPage my by id
 */
const getReportMyId = <TData = AxiosResponse<DocsReportResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/report/my/${id}`,options
    );
  }

/**
 * GetForPage report by id
 * @summary GetForPage by id
 */
const getReportId = <TData = AxiosResponse<DocsReportResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/report/${id}`,options
    );
  }

/**
 * Updates report with given text and photos
 * @summary Update report
 */
const patchReportId = <TData = AxiosResponse<void>>(
    id: string,
    patchReportIdBody: PatchReportIdBody, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
formData.append(`text`, patchReportIdBody.text)
formData.append(`images`, patchReportIdBody.images)

    return axios.patch(
      `http://localhost:8080/api/v1/report/${id}`,
      formData,options
    );
  }

/**
 * Confirms or declains report
 * @summary Confirm report
 */
const patchReportIdConfirm = <TData = AxiosResponse<void>>(
    id: string,
    docsConfirmReport: DocsConfirmReport, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:8080/api/v1/report/${id}/confirm`,
      docsConfirmReport,options
    );
  }

/**
 * GetRooms all rooms
 * @summary Get rooms
 */
const getRoom = <TData = AxiosResponse<DocsGetRoomsResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/room/`,options
    );
  }

/**
 * Creates offer with given info
 * @summary Create offer
 */
const postRoom = <TData = AxiosResponse<DocsCreateRoomResponse>>(
    docsCreateRoomRequest: DocsCreateRoomRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/api/v1/room/`,
      docsCreateRoomRequest,options
    );
  }

/**
 * GetForPage data of current user
 * @summary GetForPage me
 */
const getUser = <TData = AxiosResponse<DocsUserResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:8080/api/v1/user/`,options
    );
  }

/**
 * Log in with given name and password
 * @summary Log in
 */
const postUserLogIn = <TData = AxiosResponse<DocsAuthResponse>>(
    docsLogInRequest: DocsLogInRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/api/v1/user/log-in`,
      docsLogInRequest,options
    );
  }

/**
 * Refresh auth credentials via refresh token
 * @summary Refresh credentials
 */
const postUserRefresh = <TData = AxiosResponse<DocsAuthResponse>>(
    docsRefreshRequest: DocsRefreshRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/api/v1/user/refresh`,
      docsRefreshRequest,options
    );
  }

/**
 * Sign up with given name and password
 * @summary Sign up
 */
const postUserSignUp = <TData = AxiosResponse<DocsAuthResponse>>(
    docsSignUpRequest: DocsSignUpRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:8080/api/v1/user/sign-up`,
      docsSignUpRequest,options
    );
  }

return {getApplication,postApplication,getApplicationLimit,getApplicationId,getHotel,postHotel,getLocation,postLocation,getOffer,postOffer,getOfferSearch,getOfferId,patchOfferId,getReport,getReportMy,getReportMyId,getReportId,patchReportId,patchReportIdConfirm,getRoom,postRoom,getUser,postUserLogIn,postUserRefresh,postUserSignUp}};
export type GetApplicationResult = AxiosResponse<DocsGetApplicationsResponse>
export type PostApplicationResult = AxiosResponse<DocsCreateApplicationResponse>
export type GetApplicationLimitResult = AxiosResponse<DocsGetUserAppLimitInfoResponse>
export type GetApplicationIdResult = AxiosResponse<DocsApplicationResponse>
export type GetHotelResult = AxiosResponse<DocsGetHotelsResponse>
export type PostHotelResult = AxiosResponse<DocsCreateHotelResponse>
export type GetLocationResult = AxiosResponse<DocsGetLocationsResponse>
export type PostLocationResult = AxiosResponse<DocsCreateLocationResponse>
export type GetOfferResult = AxiosResponse<DocsGetOffersResponse>
export type PostOfferResult = AxiosResponse<DocsCreateOfferResponse>
export type GetOfferSearchResult = AxiosResponse<DocsGetOffersResponse>
export type GetOfferIdResult = AxiosResponse<DocsOfferResponse>
export type PatchOfferIdResult = AxiosResponse<void>
export type GetReportResult = AxiosResponse<DocsGetReportsResponse>
export type GetReportMyResult = AxiosResponse<DocsGetReportsResponse>
export type GetReportMyIdResult = AxiosResponse<DocsReportResponse>
export type GetReportIdResult = AxiosResponse<DocsReportResponse>
export type PatchReportIdResult = AxiosResponse<void>
export type PatchReportIdConfirmResult = AxiosResponse<void>
export type GetRoomResult = AxiosResponse<DocsGetRoomsResponse>
export type PostRoomResult = AxiosResponse<DocsCreateRoomResponse>
export type GetUserResult = AxiosResponse<DocsUserResponse>
export type PostUserLogInResult = AxiosResponse<DocsAuthResponse>
export type PostUserRefreshResult = AxiosResponse<DocsAuthResponse>
export type PostUserSignUpResult = AxiosResponse<DocsAuthResponse>
